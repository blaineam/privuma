location ~* ^/media/(.*?)/(.*?)/(.*)/$ {
    internal;
    resolver 8.8.8.8;
# Extract the remote URL parts
    set $download_protocol $1;
    set $download_host $2;
    set $download_path $3;
    # Reconstruct the remote URL
    set $download_url $download_protocol://$download_host/$download_path;
    # Headers for the remote server, unset Authorization and Cookie for security reasons.
    proxy_set_header Host $download_host;
    proxy_set_header Authorization '';
    proxy_set_header Cookie '';
    # proxy_pass_request_headers      on; # breaks requests, should be default on anyways
    # Headers for the response, by using $upstream_http_... here we can inject
    # other headers from Django, proxy_hide_header ensures the header from the
    # remote server isn't passed through.
    proxy_hide_header Content-Disposition;
    proxy_hide_header Access-Control-Allow-Origin;
    add_header Access-Control-Allow-Origin *;
    add_header Content-Disposition $upstream_http_content_disposition;
    # Stops the local disk from being written to (just forwards data through)
    proxy_max_temp_file_size 0;
    proxy_ssl_server_name on;

    # Proxy the remote file through to the client
    proxy_pass $download_url$is_args$args;
    proxy_intercept_errors on;
    error_page 301 302 307 = @handle_redirect;
}

location @handle_redirect {
    resolver 8.8.8.8;
    set $saved_redirect_location '$upstream_http_location';
    proxy_pass $saved_redirect_location;
    recursive_error_pages on;
    proxy_intercept_errors on;
    error_page 301 302 307 = @handle_redirect;
}

location /app {
    deny all;
    return 404;
}

location /cloudfs/ {
    auth_request /val;
    proxy_pass http://localhost:8991/;
}

location = /val {
    resolver 8.8.8.8;
    proxy_ssl_server_name on;
    proxy_pass https://$host/validate/;
    proxy_pass_request_body off;
    proxy_set_header Content-Length "";
    proxy_set_header X-Original-URI $request_uri;
    proxy_set_header X-ORIGINAL-ADDR $remote_addr;
}
